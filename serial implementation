#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"
#define STB_IMAGE_WRITE_IMPLEMENTATION
#include "stb_image_write.h"

#include <iostream>
#include <cmath>
#include <chrono>

using namespace std;

// Sobel filter kernels
int sobelX[3][3] = {
    {-1, 0, 1},
    {-2, 0, 2},
    {-1, 0, 1}
};

int sobelY[3][3] = {
    {-1, -2, -1},
    {0, 0, 0},
    {1, 2, 1}
};

// Apply Sobel filter in serial
void sobelSerial(unsigned char* src, unsigned char* dst, int width, int height, int channels) {
    for (int y = 1; y < height - 1; y++) {
        for (int x = 1; x < width - 1; x++) {
            int gx = 0, gy = 0;
            for (int i = -1; i <= 1; i++) {
                for (int j = -1; j <= 1; j++) {
                    int pixel = src[(y + i) * width + (x + j)];
                    gx += sobelX[i + 1][j + 1] * pixel;
                    gy += sobelY[i + 1][j + 1] * pixel;
                }
            }
            int magnitude = static_cast<int>(sqrt(gx * gx + gy * gy));
            magnitude = min(max(magnitude, 0), 255); // Clamp to [0, 255]
            dst[y * width + x] = static_cast<unsigned char>(magnitude);
        }
    }
}

int main() {
    int width, height, channels;
    // Load the image (grayscale)
    unsigned char* img = stbi_load("input.jpg", &width, &height, &channels, 1);
    if (!img) {
        cout << "Error loading image: " << stbi_failure_reason() << endl;
        return -1;
    }

    // Allocate memory for the output image
    unsigned char* edge_img = new unsigned char[width * height];

    // Measure time for serial Sobel filter
    auto start = chrono::high_resolution_clock::now();
    sobelSerial(img, edge_img, width, height, channels);
    auto end = chrono::high_resolution_clock::now();
    chrono::duration<double> elapsed = end - start;
    cout << "Serial execution time: " << elapsed.count() << " seconds" << endl;

    // Save the edge-detected image
    stbi_write_jpg("output_serial.jpg", width, height, 1, edge_img, 100);

    // Free the allocated memory
    stbi_image_free(img);
    delete[] edge_img;

    return 0;
}
