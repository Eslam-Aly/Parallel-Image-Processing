#include <opencv2/opencv.hpp>
#include <iostream>
#include <omp.h>

using namespace cv;
using namespace std;

// Sobel filter kernels
int sobelX[3][3] = {
    {-1, 0, 1},
    {-2, 0, 2},
    {-1, 0, 1}
};

int sobelY[3][3] = {
    {-1, -2, -1},
    {0, 0, 0},
    {1, 2, 1}
};

// Apply Sobel filter in parallel using OpenMP
void sobelParallel(const Mat& src, Mat& dst) {
    dst = Mat::zeros(src.size(), CV_8UC1);

    #pragma omp parallel for collapse(2)
    for (int y = 1; y < src.rows - 1; y++) {
        for (int x = 1; x < src.cols - 1; x++) {
            int gx = 0, gy = 0;
            for (int i = -1; i <= 1; i++) {
                for (int j = -1; j <= 1; j++) {
                    gx += sobelX[i + 1][j + 1] * src.at<uchar>(y + i, x + j);
                    gy += sobelY[i + 1][j + 1] * src.at<uchar>(y + i, x + j);
                }
            }
            dst.at<uchar>(y, x) = sqrt(gx * gx + gy * gy);
        }
    }
}

int main() {
    Mat src = imread("input.jpg", IMREAD_GRAYSCALE);
    if (src.empty()) {
        cout << "Error loading image" << endl;
        return -1;
    }

    Mat dst;
    double start = omp_get_wtime();
    sobelParallel(src, dst);
    double end = omp_get_wtime();
    cout << "Parallel execution time: " << (end - start) << " seconds" << endl;

    imwrite("output_parallel.jpg", dst);
    return 0;
}
